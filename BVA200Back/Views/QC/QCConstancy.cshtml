@using Newtonsoft.Json
<link rel="stylesheet"
      href="~/css/rapid-single-page.css" />

<div id="app">
  <div class="d-flex flex-column justify-content-end h-100">
    <div class="rounded-card standard-wrap bg-white">
      <div id="baselineDrawnDiv">
        <!-- Counting the background section. -->
        <div v-if="currentlyCounting == 'backgroundSpectrum'">
          <h2 class="first-p mb-5 text-center"
              id="baselineDrawnText">
              Reading the background... &nbsp;&nbsp;&nbsp;
          </h2>
          <div>
            <p class="notification my-5"
               style="text-align: center">
              We do this to ensure you are in a good location and the well is empty in order to provide you with the most accurate results.
            </p>
          </div>
        </div>
        <div v-else></div>
        <!-- Counting the standard section. -->
        <div v-if="currentlyCounting == '' && currentlyCounting != 'backgroundSpectrum' && !qcPassed"
             style="text-align: center;">
          <h2 class="first-p text-center"
              id="baselineDrawnText">
              Lets Check the Constancy! &nbsp;&nbsp;&nbsp;
          </h2>
          <div>
            <p class="notification my-5"
               style="text-align: center">
               Place the standard into the well and click "Read" below when you are ready to proceed.
            </p>
          </div>
          <div>
            <input id="countStandardButton"
                   type="button"
                   class="btn btn-lg blueButton homeScreenButtonSixInchRight"
                   value="Read"
                   v-on:click="countStandard" />
          </div>
        </div>
        <div v-else></div>
        <div v-if="currentlyCounting == 'standardSpectrum'">
          <h2 class="first-p mb-5 text-center"
              id="countingStandardText"
              style="text-align: center">
              Reading standard... &nbsp;&nbsp;&nbsp;
          </h2>
        </div>
        <div v-else></div>
        <!-- QC PASSED OPTION -->
        <h2 v-if="qcPassed"
            style="text-align: center">
          QC Passed! &nbsp;&nbsp;&nbsp;
        </h2>
        <div v-else></div>
        <div id="counterProgressBarWrapper"
             class="progress"
             v-if="currentlyCounting">
          <div id="counterProgressBar"
               class="
                progress-bar progress-bar-striped
                bg-success
                progress-bar-animated
            "></div>
        </div>
        <br />
        <br />
        <br />
        <br />
        <div>
          <p v-if="backgroundCounted" class="notification my-5"
             style="text-align: center">
             Progress on this procedure.
          </p>
        </div>
        <div id="processProgressBarWrapper"
          class="progress"
          v-if="backgroundCounted">
          <div id="processProgressBar"
              class="
                progress-bar progress-bar-striped
                bg-success
                progress-bar-animated
            " v-bind:style="{ width: progressWidth }"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Vue logic lives here -->

<script>
  CreateTestParametersStepDrivenVue(@Html.Raw(JsonConvert.SerializeObject(Model)));
  function CreateTestParametersStepDrivenVue(model) {
    new Vue({
      el: '#app',
      data: {
        // ALPHEBETICAL ORDER
        backgroundCountTime: 1,
        backgroundCounted: false,
        backgroundSpectrum: [],
        centroid: 0,
        cesium: 661,
        count: 0,
        countTime: 1,
        currentlyCounting: "",
        highChannel: model.HighChannel,
        iterationMetaDataString: "",
        lowChannel: model.LowChannel,
        peaks: [],
        qcPassed: false,
        standard: "cesium",
        standardCounting: false,
        standardSpectrums: [],
        standardSpectrumsCounts: []
      },
      async mounted() {
        this.countBackground();
      },
      async beforeUnmount() {
        await this.stopDataAquisition();
        await closeReader();
      },
      computed: {
        progressWidth: function(){
          let percentCompleteProgressBar = document.getElementById("processProgressBar");
          let completed = this.count;
          switch (completed){
            case 1:
              percentCompleteProgressBar.innerHTML = '<span class="progress-inner">'  + '1 of 5 Complete';
              return '20%';
              break;
            case 2:
              percentCompleteProgressBar.innerHTML = '<span class="progress-inner">'  + '2 of 5 Complete';
              return '40%';
              break;
            case 3:
              percentCompleteProgressBar.innerHTML = '<span class="progress-inner">'  + '3 of 5 Complete';
              return '60%';
              break;
            case 4:
              percentCompleteProgressBar.innerHTML = '<span class="progress-inner">'  + '4 of 5 Complete';
              return '80%';
              break;
            case 5:
              percentCompleteProgressBar.innerHTML = '<span class="progress-inner">'  + '5 of 5 Complete';
              return '100%';
              break;
            default:
              return '0%'
              break;
          }
        }
      },
      methods: {
        async countBackground() {
          this.countSample("backgroundSpectrum");
        },
        async countStandard() {
          this.countSample("standardSpectrum");
        },
        async countSample(sampleName) {
          this.currentlyCounting = sampleName;
          const context = this;
          try {
            if (sampleName == 'backgroundSpectrum') {
              await this.openReader();
            } else {
              //standard
              if (context.fineGain > 3999) {
                console.log('FineGain out of scope.')
                context.fineGain = 1500;
                await context.setDetectorFineGain();
                console.log('Fine Gain reset to ', context.fineGain);
              }
            }

            // Clear previous data if any, then start a read and start a timer based on the Sample Count Time.
            await clearMemory();
            await startRead();
            context.run(sampleName);
          } catch (err) {
            onFail(err, "Failed to start data aquisition");
          }

        },

        // UTILITY METHODS ------------------------------------------------------------------------------------------------------------------------------------------------
        startTimer: function (countForTime) {
          const context = this;
          var now = new Date();
          var countDownDate = moment(now).add(countForTime, 'm').toDate();

          this.queProgressBar("counterProgressBar", countForTime);

          let intervalTimer = setInterval(function () {
            var now = new Date().getTime();
            // Find the distance between now and the count down date
            var distance = countDownDate - now;

            let textfield = document.getElementById("counterProgressBar");
            if (textfield) {
              var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
              var seconds = Math.floor((distance % (1000 * 60)) / 1000);
              var string = '<span class="progress-inner">' + minutes + 'm ' + seconds + 's remaining';

              textfield.innerHTML = string;
            }

            // If the count down is finished, write some text
            if (distance <= 0) {
              clearInterval(intervalTimer);
            }
          }, 1000);
        },
        run(sampleName) {
          const context = this;

          let tCountTime = context.countTime;

          if (sampleName === "backgroundSpectrum") {
            tCountTime = context.backgroundCountTime;
          }

          this.startTimer(tCountTime);

          setTimeout(function () {
            context.updateSpectrum(sampleName);
            context.currentlyCounting = "";
          }, tCountTime * 60 * 1000);
        },
        async openReader() {
          const context = this;
          try {
            await openTopazReader();
            context.detectorOpen = true;
          } catch (err) {
            onFail(err, 'Failed to open Topaz Reader');
          }
        },
        async closeReader() {
          const context = this;
          try {
            await closeTopazReader();
            context.detectorOpen = false;
          } catch (err) {
            onFail(err, 'Failed to close Topaz Reader');
          }
        },
        async startDataAquisition() {
          const context = this;
          try {
            await startRead();
            context.run();
          } catch (err) {
            onFail(err, 'Failed to start data aquisition');
            console.error(err);
          }
        },
        async stopDataAquisition() {
          const context = this;
          try {
            context.stop();
            await stopRead();
            if (context.interval) {
              clearInterval(context.interval);
            }
            return;
          } catch (err) {
            onFail(err, 'Failed to stop data aquisition');
            console.error(err);
          }
        },
        async updateSpectrum(sampleName) {
          await stopRead();
          const context = this;
          try {
            const response = await readSpectrum();
            context.spectrum = response.detectorSpectrum;
            this.fineGain = response.fineGain;
            var cs = response.calculatedSample;

            if (cs && sampleName != 'backgroundSpectrum') {
              context.tracer = cs.sampleName;
              context.centroid = cs.centroid;
              context.lowChannel = cs.lowChannel;
              context.highChannel = cs.highChannel;
            }
            context.reportSpectrum(sampleName);
            return;
          } catch (err) {
            onFail("Failed to read spectrum.");
            console.error(err);
          }
        },
        reportSpectrum: function (sampleName) {
          const context = this;
          let counts = this.spectrum.slice(this.lowChannel, this.highChannel).reduce((acc, cur) => acc += cur, 0);

          switch (sampleName) {
            case "backgroundSpectrum":
              context.backgroundSpectrum = context.spectrum;
              context.backgroundSpectrumCounts = counts;
              context.backgroundCounted = true;
              break;
            case "standardSpectrum":
              context.count++
              // Push spectrum and counts based on low and high channel to arrays.
              context.standardSpectrums.push(context.spectrum);
              context.standardSpectrumsCounts.push(counts);
              // Every count should be a min, after 5 counts check constancy over them.
              if (context.count < 5) {
                context.countStandard();
              } else {
                let result = true;
                for (var count of context.standardSpectrumsCounts) {
                  let percentage = context.standardSpectrumsCounts[0] * 5 / 100;
                  let high = context.standardSpectrumsCounts[0] + percentage;
                  let low = context.standardSpectrumsCounts[0] - percentage;
                  if (count < low || count > high || count < 800) {
                    result = false;
                    context.count = 0;
                    context.standardSpectrums = [];
                    context.standardSpectrumsCounts = [];
                  }
                }
                if(!result){

                  onFail("Perform a calibration, verify the sample is seated in the well and try again.", "QC Constancy is out of bounds.");
                }else{
                  context.qcPassed = true;
                  context.saveQCConstancy("log");
                  onSuccess("QC Constancy Saved successfully", "Saved");
                }
              }
              break;
            default:
              break;
          }
        },
        // CHANGE THIS TO UPDATE QC CONSTANCY COMPLETED
        async updateDatabase() {
          const url = "TopazDetector/SaveFineGainCalibration"
          const payload = {
            FineGain: parseInt(this.fineGain),
            Detector: "Topaz"
          };
          try {
            await axios.post(url, payload);
          } catch (err) {
            console.error(err);
            onFail(err, "Detector settings failed to update in database.");
          }
        },
        async saveQCConstancy(type) {
          const context = this;
          let url = type === "log" ? "QC/SaveQCLog" : "QC/SaveQC";
          let result = this.qcPassed;
          const payload = {
            TestType: 'Constancy',
            Timestamp: isoUTCNow(),
            Counts: this.standardSpectrumsCounts[4],
            CPM: this.standardSpectrumsCounts[4],
            Result: result
          }
          try {
            axios.post(url, payload).then(function (response) {
              console.log(response.data);
            });
          } catch (err) {
            onFail("Failed To Save", "Failed");
          }
        },
        //  UTILITY METHODS
        queProgressBar: function (progressBarName, minutes) {
          const context = this;
          const progressBar = document.getElementById(progressBarName);
          if (!progressBar) {
            setTimeout(() => {
              context.queProgressBar(progressBarName, minutes);
            }, 1000);
            return;
          }
          if (progressBar) {
            progressBar.animate([
              // keyframes
              { width: '0' },
              { width: '100%' }
            ], {
              // timing options
              duration: minutes * 60 * 1000,
              iterations: 1
            });
          }
        },
        ...vueMethods
      }
    })
  }
  feather.replace();
</script>
<style scoped>
  #counterProgressBar {
    width: 0;
    transition: width 300s;
    transition-timing-function: linear;
  }

  #counterProgressBar.loaded {
    width: 100%;
  }

  .progress {
    height: 40px;
    font-size: 1rem;
    background-color: lightgray;
    border-radius: 0;
    max-width: 600px;
    margin: 0 auto;
  }

  .progress-inner {
    padding: 0 1em;
  }
</style>