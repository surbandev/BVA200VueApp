@using Newtonsoft.Json

<div id="app">
    <div class="d-flex flex-column justify-content-end h-100">
        <div class="rounded-card standard-wrap bg-white">
            <div class="container btn-wrap d-flex flex-column align-items-center justify-content-center h-100">
                <span><input type="button"
                       class="btn btn-lg blueButton mb-5"
                       v-on:click="goto('QCCalibration')"
                       value="QC Calibration" /><i v-if="recentCalibrationPassed" class="fa fa-circle" aria-hidden="true" style="color: green;"></i><i v-else class="fa fa-circle" aria-hidden="true" style="color: red;"></i></span>
                       <p style="color: green;">Est 2 min</p>
                <span><input type="button"
                       class="btn btn-lg blueButton mb-5"
                       v-on:click="goto('QCEfficiency')"
                       value="QC Efficiency" 
                       :disabled="!recentCalibrationPassed" /><i v-if="efficiency" class="fa fa-circle" aria-hidden="true" style="color: green;"></i><i v-else class="fa fa-circle" aria-hidden="true" style="color: red;"></i></span>
                       <p style="color: green;">Est 3 - 10 min min</p>
                <span><input type="button"
                       class="btn btn-lg blueButton mb-5"
                       v-on:click="goto('QCConstancy')"
                       value="QC Constancy" 
                       :disabled="!recentCalibrationPassed" /><i v-if="constancy" class="fa fa-circle" aria-hidden="true" style="color: green;"></i><i v-else class="fa fa-circle" aria-hidden="true" style="color: red;"></i></span>
                       <p style="color: green;">Est 6 min</p>
                <span><input type="button"
                       class="btn btn-lg blueButton mb-5"
                       v-on:click="goto('QCLinearity')"
                       value="QC Linearity" 
                       :disabled="!recentCalibrationPassed" /><i v-if="linearity" class="fa fa-circle" aria-hidden="true" style="color: green;"></i><i v-else class="fa fa-circle" aria-hidden="true" style="color: red;"></i></span>
                       <p style="color: green;">Est 13 min</p>
            </div>
            <!-- Modal -->
            <div id="confirmationModal"
                 style="display: none">
                <div class="container-body mt-5">
                    <p class="modal-copy">
                    <ol>
                        <li>1.) Unplug all USB devices EXCEPT the Topaz Reader.</li>
                        <li>2.) When prompted, enter the root password to the host OS.</li>
                        <li>3.) After you correctly enter the root password, the USB Ports
                            will be unlocked and the BVA200 application will close.
                        </li>
                        <li>4.) After the BVA200 application is closed, you may plug in any
                            USB device such as keyboard, mouse, and storage device.
                        </li>
                        <li>5.) Upon completing maintenance, YOU MUST REBOOT THE DEVICE YOURSELF.</li>
                    </ol>
                    Do you understand and wish to proceed?
                    </p>
                </div>
                <div class="icon-wrap d-flex justify-content-around mt-5">
                    <input type="button"
                           class="btn btn-lg blueButton homeScreenButtonSixInchRight"
                           v-on:click="enterMaintenanceMode"
                           value="Yes" />
                    <input type="button"
                           class="btn btn-lg blueButton homeScreenButtonSixInchRight"
                           v-on:click="closeFancyBox"
                           value="No" />
                </div>
            </div>
        </div>
    </div>
</div>

@* Vue logic lives here *@
<script>
    CreateUtilitiesVue(@Html.Raw(JsonConvert.SerializeObject(Model)));

    function CreateUtilitiesVue(model) {
        new Vue({
            el: '#app',
            data: {
                // Alphebetical Order
                efficiencyStatusPassed: model.EfficiencyStatusPassed,
                efficiencyAgeAcceptable: model.EfficiencyAgeAcceptable,
                constancyStatusPassed: model.ConstancyStatusPassed,
                constancyAgeAcceptable: model.ConstancyAgeAcceptable,
                linearityStatusPassed: model.LinearityStatusPassed,
                linearityAgeAcceptable: model.LinearityAgeAcceptable,
                recentCalibrationPassed: model.RecentCalibrationPassed
            },
            computed: {   
                efficiency: function(){
                    if(!this.efficiencyStatusPassed || !this.efficiencyAgeAcceptable){
                        return false;
                    }else{
                        return true;
                    }
                },
                constancy: function(){
                    if(!this.constancyStatusPassed || !this.constancyAgeAcceptable){
                        return false;
                    }else{
                        return true;
                    }
                },
                linearity: function(){
                    if(!this.linearityStatusPassed || !this.linearityAgeAcceptable){
                        return false;
                    }else{
                        return true;
                    }
                }
            },
            methods: {
                closeFancyBox: function () {
                    $.fancybox.close();
                },
                enterMaintenanceMode: function () {
                    this.closeFancyBox();
                    console.log("ENTERING MAINTENANCE MODE");
                    const context = this;
                    const url = baseURL + "Utilities/MaintenanceMode?UserSessionGuid=" + this.currentUserSession;
                    const payload = {
                        UserSessionGUID: context.currentUserSession
                    }
                    axios.post(url, payload).then(function (response) {
                        console.log("RESPONSE", response)
                        switch (response.status) {
                            case 200:
                                console.log("GOT A 200")
                                /*
                                The controller should automatically close the browser at this point.
                                If it doesn't, show toast saying "Plug in your devices now"
                                */
                                context.onSuccess("Press Alt+F4 to gain access to the OS", "USB Ports Enabled");
                                break;
                            default:
                                context.onFail(response);
                                break;
                        }
                    }).catch((x) => {
                        console.log("FAIL", x)
                        context.onFail("Failed to enter Maintenance Mode", "Error");
                    });
                },
                ...vueMethods
            }
        })
    }
    feather.replace();
</script>

<style scoped>
    .btn-wrap input {
        width: 400px;
    }

    #app {
        height: 100%;
    }
</style>