//---------------------------------------USE FOR TESTING-------------------------------------------------------------------
// const lowChannel = 294;
// const highChannel = 405;
// const preInjectionSpectrum = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 2, 3, 1, 3, 5, 4, 5, 2, 0, 1, 2, 3, 2, 2, 1, 3, 2, 2, 3, 5, 5, 6, 4, 5, 0, 3, 2, 2, 4, 6, 6, 4, 1, 5, 0, 4, 3, 7, 7, 8, 8, 5, 3, 5, 4, 6, 8, 6, 7, 9, 4, 11, 17, 7, 8, 8, 16, 13, 19, 10, 12, 16, 12, 11, 14, 13, 11, 14, 12, 15, 13, 15, 11, 9, 12, 9, 17, 7, 9, 5, 10, 11, 8, 12, 9, 11, 17, 7, 2, 5, 8, 16, 10, 17, 16, 10, 20, 8, 7, 7, 11, 11, 7, 4, 11, 6, 11, 10, 15, 15, 9, 12, 5, 7, 7, 13, 10, 6, 10, 8, 7, 8, 5, 8, 8, 2, 10, 5, 6, 6, 6, 14, 7, 4, 4, 9, 8, 9, 7, 7, 8, 7, 7, 4, 15, 4, 8, 6, 7, 4, 9, 5, 5, 3, 9, 6, 1, 5, 8, 7, 5, 4, 6, 6, 4, 4, 9, 6, 6, 5, 10, 7, 5, 6, 7, 4, 9, 5, 11, 2, 5, 7, 5, 4, 4, 4, 1, 6, 6, 3, 5, 2, 3, 9, 4, 5, 6, 5, 7, 4, 7, 7, 9, 3, 8, 5, 4, 5, 0, 7, 3, 3, 3, 6, 4, 3, 5, 3, 3, 5, 5, 4, 5, 3, 4, 1, 3, 4, 2, 4, 5, 6, 5, 3, 2, 2, 4, 3, 5, 3, 2, 4, 2, 2, 3, 7, 3, 2, 1, 4, 3, 3, 4, 3, 3, 8, 0, 5, 1, 1, 1, 4, 2, 0, 1, 3, 4, 0, 1, 3, 6, 3, 0, 1, 4, 5, 0, 2, 3, 2, 1, 3, 0, 0, 2, 1, 1, 4, 3, 0, 3, 1, 4, 0, 5, 3, 2, 3, 2, 1, 1, 2, 3, 3, 2, 1, 4, 1, 0, 1, 0, 3, 4, 0, 1, 1, 1, 2, 1, 2, 3, 0, 2, 1, 0, 2, 1, 0, 3, 0, 2, 2, 0, 4, 2, 0, 1, 0, 1, 1, 1, 3, 0, 4, 0, 3, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 2, 0, 1, 3, 0, 1, 0, 0, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1, 1, 0, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 0, 2, 0, 2, 0, 1, 0, 2, 0, 0, 0, 1, 1, 2, 0, 1, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 2, 0, 2, 1, 1, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 1, 1, 2, 1, 1, 0, 0, 0, 1, 4, 0, 1, 1, 1, 0, 0, 2, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1];
// const backgroundSpectrum = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,2,4,2,1,6,5,7,1,2,5,3,1,2,1,2,2,4,1,2,5,2,4,3,3,4,2,4,4,6,6,1,4,7,9,8,11,5,4,7,5,7,6,8,12,7,6,8,10,7,13,11,7,4,11,11,10,11,10,8,16,11,9,10,9,10,14,6,17,11,14,12,18,17,20,19,15,10,14,9,18,15,9,17,13,15,16,12,17,10,10,11,14,9,14,12,8,9,10,10,8,6,7,13,11,10,7,9,11,7,8,7,13,12,11,9,8,10,11,15,7,7,9,12,12,13,9,13,4,10,13,10,7,9,8,7,9,6,8,12,16,6,7,6,10,11,9,8,8,5,7,5,6,8,4,7,9,8,10,6,4,5,3,3,10,5,9,12,5,9,7,4,8,5,9,3,2,7,8,9,4,4,5,7,4,2,5,5,4,8,9,5,9,5,8,9,4,4,7,3,3,3,4,5,7,3,3,3,4,6,5,7,2,3,4,1,2,2,5,5,5,4,4,6,3,5,5,5,2,5,4,4,1,1,1,1,3,2,2,3,3,3,3,3,4,5,4,1,0,1,6,2,7,1,1,5,1,4,4,1,2,3,2,2,2,4,5,6,3,2,1,2,0,2,3,3,2,1,2,2,3,1,2,3,1,2,3,1,2,2,0,2,3,3,2,3,0,0,3,0,1,3,4,2,5,3,0,2,2,3,3,0,2,2,6,6,2,2,2,4,3,1,3,7,2,1,3,2,3,6,2,0,1,2,2,1,0,2,3,6,3,2,3,3,1,1,3,2,3,6,1,2,1,2,1,3,1,3,0,0,1,2,0,1,0,2,2,3,3,1,1,0,1,3,1,3,1,1,0,1,0,0,0,2,0,0,1,1,5,0,3,1,2,0,0,0,0,0,1,0,0,1,1,2,1,1,2,0,1,0,1,0,3,2,0,0,0,1,0,1,1,0,1,0,0,2,0,1,0,0,0,0,1,0,2,2,0,2,0,4,0,1,1,2,0,1,0,0,0,2,2,1,0,0,0,1,0,1,2,0,0,0,0,0,0,2,0,2,0,0,4,1,1,0,0,0,2,1,0,0,0,0,1,1,0,0,1,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,0,2,1,1,0,0,0,0,0,0,2,3,1,1,0,1,0,1,1,1,2,1,0,0,0,2,2,1,0,2,0,1,1,0,2,0,1,0,0,1,0,0,0,1,0,1,1,0,0,1,0,2,0,2,0,0,0,0,1,0,1,3,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,2,0,0,1,0,0,0,0,0,0,1,2,0,1,1,1,0,0,1,0,0,0,0,0,1,1,0,0,2,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,2,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,2,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,1,1,0,0,2,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
// const standardSpectrum = [0,0,0,1,0,0,1,0,0,1,3,3,7,13,19,37,65,67,80,119,137,158,184,171,203,221,239,216,233,216,197,202,223,223,202,205,211,235,213,212,234,254,202,213,248,248,241,246,255,262,257,212,240,250,254,241,224,233,275,223,278,252,233,251,283,288,295,329,354,380,357,419,389,442,493,527,654,640,678,673,636,673,685,695,674,631,663,592,582,524,533,542,467,435,421,415,365,324,292,292,291,303,259,267,266,250,247,194,218,214,242,197,228,213,209,202,201,205,202,216,197,154,203,191,192,197,188,192,192,204,179,222,193,191,196,179,196,179,194,201,184,180,171,218,198,185,182,174,204,192,175,219,191,200,198,219,178,210,193,182,201,180,199,206,212,196,184,193,182,186,196,153,167,163,193,192,162,149,168,182,163,168,200,166,172,165,187,187,173,175,175,163,167,172,179,175,181,182,173,170,164,151,167,157,162,168,165,152,170,144,160,164,164,175,156,156,190,148,144,164,161,155,163,162,144,136,162,154,145,149,143,157,154,151,148,166,172,161,158,136,164,173,169,176,189,180,192,196,205,194,227,231,209,256,235,250,257,279,275,330,310,301,363,408,384,351,356,387,406,470,420,467,452,479,464,544,490,516,529,532,575,551,606,617,620,630,626,660,690,700,670,681,678,674,708,685,750,662,661,646,603,614,604,592,595,583,560,541,591,551,487,501,525,541,544,537,545,606,597,616,580,683,698,727,815,844,871,897,977,1058,1113,1132,1244,1234,1285,1329,1329,1365,1400,1375,1497,1473,1513,1521,1529,1576,1499,1507,1628,1462,1474,1466,1511,1443,1313,1337,1331,1278,1248,1154,1184,1064,1128,1039,986,911,896,891,806,731,710,683,665,623,571,550,510,455,473,429,369,390,290,305,299,275,237,233,227,207,191,175,155,136,130,142,123,114,119,110,88,76,82,67,64,63,57,59,42,39,36,41,28,30,30,21,32,19,28,17,20,23,24,18,14,15,15,13,14,12,21,15,14,12,18,19,13,15,11,15,15,8,11,13,5,17,5,4,7,10,8,11,8,7,9,8,8,4,5,9,2,7,11,8,4,5,6,6,4,5,3,5,3,5,5,10,6,4,4,7,4,8,3,4,5,5,6,4,3,5,5,2,6,4,3,5,5,3,2,1,1,7,6,7,4,4,3,3,1,1,0,1,3,5,6,2,1,3,2,5,6,4,4,2,0,5,6,2,10,3,3,1,7,2,3,5,3,4,3,3,3,2,8,3,3,5,3,4,5,5,6,3,5,2,3,5,2,2,2,8,11,5,4,7,2,0,3,4,4,3,4,1,7,2,3,5,4,3,2,3,3,2,3,4,4,5,5,5,3,7,10,3,5,2,3,2,6,1,5,3,3,5,4,9,2,2,5,3,0,5,4,4,6,1,2,3,8,2,3,3,1,1,2,3,2,0,5,4,3,2,2,3,1,4,3,4,0,1,2,3,2,4,5,2,1,2,3,1,2,3,1,4,3,3,2,1,1,1,1,5,2,1,2,2,5,3,2,3,1,4,3,1,1,0,0,2,2,0,2,1,1,2,0,2,0,1,5,1,1,1,1,2,2,2,3,1,1,3,4,1,1,6,2,1,1,1,0,1,2,2,2,2,2,1,3,0,2,2,3,1,3,2,1,1,0,0,4,1,3,3,1,3,4,0,3,0,2,0,1,2,0,0,4,2,3,1,0,3,0,2,1,0,1,2,2,0,4,2,3,1,2,0,0,0,3,2,1,0,2,1,3,1,0,5,3,0,0,2,0,0,1,1,0,3,1,1,1,0,3,0,0,1,2,0,2,2,1,2,0,4,4,1,2,0,1,1,1,3,0,1,0,1,0,1,0,1,0,0,1,3,1,1,0,3,0,2,1,1,4,1,0,1,1,0,0,0,2,1,2,0,4,2,1,1,0,0,0,2,0,2,0,0,0,1,3,1,1,3,2,0,1,1,3,2,2,2,2,1,1,0,0,0,2,2,0,0,1,0,2,1,1,0,1,1,0,2,1,1,2,2,0,0,1,0,1,2,1,2,4,1];
// const postInjectionSpectrum1 = [0,0,0,0,0,0,0,0,0,0,0,1,3,5,2,5,2,7,14,14,22,17,37,38,35,34,38,39,35,50,53,53,50,51,39,40,45,51,36,41,39,39,49,41,53,49,46,60,36,53,53,50,51,48,59,63,53,56,63,78,62,75,63,74,62,88,79,92,79,95,103,92,116,118,101,149,126,138,173,164,155,137,178,144,168,144,188,169,141,145,130,135,161,115,130,110,108,135,102,91,93,97,75,97,80,101,84,81,98,94,89,87,96,77,87,91,86,86,81,87,93,89,84,77,83,95,75,83,82,86,77,86,94,70,65,83,70,75,84,66,84,72,79,75,63,86,71,79,74,77,70,95,65,86,71,68,61,82,60,68,66,54,60,72,63,44,60,68,61,69,58,58,59,60,57,53,54,45,60,53,74,61,47,52,65,43,61,58,56,54,47,54,50,52,53,55,43,37,41,53,57,50,57,51,38,48,39,58,45,41,39,53,49,35,51,43,44,52,50,38,35,54,53,47,53,47,38,38,37,40,51,35,38,44,40,30,38,40,43,44,41,40,38,34,25,36,49,35,48,32,49,47,52,45,44,37,44,37,65,59,52,48,57,70,74,63,66,72,85,62,62,67,71,88,78,78,80,99,88,79,85,70,74,89,95,107,103,87,73,87,97,91,94,102,86,94,72,95,90,60,72,65,82,93,84,70,75,65,60,84,81,80,70,73,77,78,72,68,71,77,80,85,94,119,108,135,125,137,127,140,145,144,137,154,186,178,174,178,187,179,186,187,191,193,216,173,193,188,175,170,188,197,200,170,163,163,147,168,164,152,138,107,131,120,110,107,104,79,86,88,94,85,85,76,83,76,61,45,53,43,45,51,41,43,33,41,36,24,35,36,18,33,25,22,25,21,16,20,11,15,12,14,12,14,13,9,13,9,11,13,6,13,14,13,8,14,10,9,8,8,6,10,9,13,7,9,12,7,5,5,10,7,6,8,8,10,7,5,6,8,4,5,5,2,8,3,3,4,6,6,5,2,9,4,6,5,2,1,3,6,2,3,4,7,6,4,7,4,8,4,3,6,1,6,5,4,5,7,5,3,3,3,5,4,5,4,5,5,5,0,5,2,4,5,8,7,2,2,6,4,2,2,2,2,5,4,1,2,3,5,3,6,4,4,2,1,3,6,5,2,4,2,4,5,5,7,5,3,3,2,5,4,4,6,3,2,5,4,4,4,2,1,10,4,4,3,3,1,5,3,5,4,3,2,6,8,5,3,6,2,6,6,4,5,2,4,3,2,5,2,2,4,6,7,0,1,2,2,4,5,1,8,4,1,2,3,5,4,2,6,3,1,2,1,1,4,2,3,3,3,6,2,6,2,2,3,3,0,5,4,3,3,5,2,5,3,3,1,1,4,1,2,2,0,0,4,2,1,2,4,2,1,3,3,0,3,0,0,1,0,3,1,0,1,3,2,3,1,1,2,2,0,2,2,0,2,4,4,5,2,6,4,2,1,1,0,2,0,0,1,1,2,1,0,1,1,5,3,3,1,2,3,4,1,2,2,1,3,0,1,0,3,2,1,2,1,2,2,2,0,1,2,2,1,2,3,2,1,2,4,4,3,1,0,2,2,1,3,1,0,0,2,1,3,0,2,1,4,2,2,2,2,3,1,1,1,2,0,1,0,1,1,1,1,4,0,0,0,1,1,0,3,0,2,0,1,3,3,2,1,1,2,2,1,2,2,1,2,2,1,3,1,2,0,1,1,2,1,0,2,1,2,2,1,1,1,2,1,0,2,0,2,1,1,1,1,1,1,0,2,1,2,1,0,2,1,1,2,0,5,1,1,0,2,0,2,0,0,4,1,1,2,0,1,2,0,2,1,5,1,3,4,1,2,1,2,0,0,0,1,0,2,0,0,2,2,3,0,0,1,3,1,1,2,0,2,2,2,1,3,1,3,1,3,3,1,1,1,1,2,3,2,1,0,0,1,0,2,4,1,2,2,3,2,1,0,0,1,2,4,1,3,2,2,2,1,2,0,1,2];
// const postInjectionSpectrum2 = [0,0,0,0,1,0,0,1,0,0,1,0,1,3,6,4,7,11,19,20,17,19,33,35,36,34,48,40,40,45,34,33,43,34,38,34,30,39,30,43,39,39,44,41,41,54,41,45,52,63,51,56,49,60,69,44,64,59,56,58,57,73,74,82,80,72,86,75,77,103,100,95,106,117,116,126,165,171,143,142,138,152,152,149,153,141,157,153,152,150,137,128,130,121,100,115,104,116,98,86,110,92,97,103,99,92,79,80,88,78,101,82,76,92,105,71,88,77,76,88,80,90,81,74,82,79,81,102,73,97,87,89,67,87,93,83,87,77,85,63,64,76,82,60,74,74,77,71,71,86,65,60,70,66,80,86,85,91,63,64,65,71,73,61,59,56,59,68,55,62,62,52,67,65,66,63,67,55,56,52,62,62,61,61,53,48,58,39,53,58,50,53,48,63,52,46,44,45,54,51,45,52,51,53,65,47,55,46,32,48,39,48,30,49,51,50,46,48,49,46,44,52,49,32,43,41,46,42,48,39,35,30,42,35,42,43,37,46,33,44,42,47,41,39,48,32,42,54,38,40,49,46,48,42,47,52,61,58,54,52,60,61,62,60,49,65,62,67,66,57,68,65,61,81,67,88,87,74,74,70,97,90,80,75,93,89,112,86,96,94,104,109,101,98,87,98,94,76,73,84,91,91,78,76,74,79,90,56,73,74,71,80,54,67,74,68,76,84,92,83,84,99,93,110,109,121,140,143,122,139,133,154,172,170,156,180,175,190,202,205,193,189,204,192,201,198,185,205,189,178,170,194,185,163,191,173,165,183,155,141,127,137,108,117,114,126,108,109,93,77,69,90,85,73,78,89,67,55,67,51,62,49,36,42,44,27,29,32,35,22,21,27,24,22,27,19,18,20,15,16,12,11,11,11,7,11,12,12,5,7,11,4,4,7,8,9,3,9,9,9,7,4,10,6,6,9,5,8,2,4,8,9,8,9,7,5,7,3,6,7,4,5,3,8,8,7,2,11,6,5,2,5,4,3,8,3,4,3,3,3,3,7,6,3,5,6,2,4,5,3,6,3,3,3,4,3,5,8,1,6,1,2,7,5,2,3,2,2,8,11,6,3,2,7,2,1,4,8,4,6,2,3,3,4,4,4,4,2,6,3,7,3,7,3,2,1,3,4,3,6,6,4,4,2,5,2,3,0,4,6,4,5,2,1,4,3,2,4,5,2,6,2,2,6,7,4,6,4,3,0,1,3,3,1,5,3,5,6,4,3,7,1,2,4,1,6,6,4,5,7,1,7,4,5,4,1,3,3,4,6,0,3,1,5,0,5,3,4,3,2,3,8,4,5,4,7,2,6,2,2,5,6,3,3,2,0,1,4,1,3,7,5,1,3,1,2,3,3,1,1,3,2,2,3,1,3,0,0,0,5,1,0,2,0,0,2,4,5,4,4,1,2,1,0,1,0,0,4,3,2,1,0,6,3,3,2,0,2,3,2,0,0,0,0,1,3,2,1,2,0,0,2,1,1,2,1,1,0,1,1,3,4,3,1,2,3,1,2,5,3,2,2,1,4,3,3,2,1,2,0,0,0,1,1,2,3,2,2,3,1,4,3,0,1,1,4,1,3,3,0,0,1,0,1,5,0,1,1,0,2,1,2,1,0,2,2,1,1,1,1,1,0,1,3,1,3,1,2,2,3,0,1,3,0,3,1,2,2,1,4,2,1,0,1,6,1,1,1,2,0,0,6,3,1,1,2,1,1,3,4,1,1,0,1,0,0,0,0,1,1,1,2,1,3,0,1,1,3,3,3,1,1,3,1,1,1,0,0,2,0,3,3,1,1,1,2,3,0,1,1,2,4,1,1,2,1,2,4,1,4,1,0,1,0,1,1,2,2,2,2,2,2,2,1,1,0,5,1,1,1,0,3,1,1,2,2,1,3,1,2,0,0,0,0,0,0,1,1,3,1,1,0,1,3,3,2,2,0,0,1,1,0,3,0,1,5,1,1,1,3,1,2,0,0,3,2,1,1,2,2];
// const postInjectionSpectrum3 = [0,1,0,0,0,0,0,1,0,1,2,0,5,3,4,9,9,14,13,15,22,33,30,25,39,28,36,34,37,39,42,37,36,44,30,43,39,38,37,37,42,48,51,33,42,47,52,44,48,44,50,45,59,44,47,57,59,57,54,54,51,48,73,52,57,66,54,83,86,85,92,102,92,97,116,108,112,120,144,133,144,127,135,130,135,119,128,139,116,144,121,135,132,102,133,119,78,106,110,94,87,96,112,96,94,91,97,76,80,84,105,68,83,87,77,91,95,103,82,87,79,71,86,79,73,95,86,70,83,78,66,74,78,79,66,77,50,80,69,72,67,70,74,69,80,61,65,87,72,65,76,74,83,60,68,74,66,73,76,69,65,60,59,53,58,71,62,61,50,65,68,78,63,50,64,67,47,54,54,57,53,61,66,65,58,58,49,59,53,51,64,66,42,52,52,49,43,59,55,46,34,54,44,45,49,43,46,44,40,43,53,49,45,46,39,45,44,49,35,42,50,41,35,35,30,39,40,45,48,53,39,41,33,40,38,39,42,42,57,35,41,43,40,37,41,44,45,32,34,39,45,55,47,44,41,60,48,53,47,36,50,54,53,60,58,61,56,59,49,55,56,73,62,74,68,87,69,65,69,64,73,70,78,71,77,82,81,76,98,89,85,77,73,85,83,75,81,78,88,73,91,87,76,77,74,74,73,61,75,84,57,74,78,49,65,60,75,71,84,85,79,74,70,88,104,115,115,122,109,137,132,126,136,136,148,143,144,137,171,162,177,167,172,159,174,176,170,183,166,166,171,169,152,175,168,156,161,143,159,127,130,126,109,134,107,107,111,120,100,88,83,94,94,85,73,69,68,75,60,49,48,58,47,40,36,44,38,25,28,27,23,30,20,16,27,21,11,13,17,17,9,16,14,16,8,11,17,11,5,12,13,7,9,5,15,13,8,15,7,8,7,6,6,9,5,6,5,8,9,2,5,5,4,7,8,7,4,6,4,3,7,5,4,7,7,7,2,7,6,7,4,3,5,7,5,5,3,8,3,4,6,6,2,7,4,8,5,1,6,7,7,4,4,5,4,4,4,5,6,3,7,1,4,4,2,6,4,2,4,6,3,4,3,3,2,7,7,4,6,5,3,1,4,4,4,1,2,3,4,7,6,2,4,2,1,3,2,4,6,3,4,4,5,1,5,4,1,2,2,1,2,5,6,5,2,4,4,2,5,3,2,3,5,1,5,7,1,5,5,1,5,3,0,1,2,1,6,4,5,6,1,5,4,3,3,2,2,4,5,8,4,5,4,5,6,2,5,2,2,4,5,2,4,9,2,7,5,2,3,3,1,4,1,5,3,3,4,4,1,3,2,2,5,2,4,5,2,3,1,4,4,1,3,2,6,3,5,1,2,2,0,2,1,3,1,2,3,0,7,1,1,1,2,2,3,3,1,4,2,3,2,1,2,0,3,1,3,2,2,3,2,2,1,3,1,1,2,3,0,1,0,0,3,1,2,2,2,1,0,4,1,1,2,2,3,1,4,0,6,2,2,1,2,4,2,0,1,0,1,1,5,1,0,2,2,3,2,1,2,5,1,0,1,1,3,1,1,1,4,0,0,3,1,3,2,0,4,0,3,0,0,2,3,3,1,0,0,1,3,2,1,0,0,2,0,1,1,0,2,0,2,0,1,2,1,0,2,2,2,3,2,1,1,1,2,2,1,5,2,0,0,1,0,1,2,1,0,1,0,3,1,4,1,4,0,0,2,1,1,1,4,2,2,2,4,0,0,0,1,3,2,2,1,1,4,2,0,1,0,2,3,0,1,1,1,0,1,1,4,1,3,0,1,0,1,2,2,0,0,1,2,2,1,0,1,0,1,0,1,1,1,2,0,3,0,1,1,1,2,1,0,0,2,4,1,1,2,0,1,2,1,0,0,0,3,1,4,1,1,1,1,0,0,1,0,1,0,1,1,2,1,1,0,1,0,1,3,1,1,1,2,3,3,0,2,0,0,1,1,0,2,1,2,1,2,1,1,0,0,0];
// const postInjectionSpectrum4 = [0,0,0,0,0,0,0,0,0,0,0,0,1,5,0,6,6,9,15,17,26,26,16,25,32,32,24,42,38,47,40,35,45,38,44,38,36,32,38,50,35,42,31,37,48,54,43,43,51,37,54,47,51,50,51,52,47,48,63,58,49,75,65,47,68,67,71,83,81,90,103,83,97,96,124,128,114,136,115,151,144,123,159,139,140,154,131,135,112,129,125,130,122,112,119,113,106,94,97,84,98,81,93,81,87,73,90,67,72,90,78,73,85,86,78,65,88,77,69,91,79,91,74,91,81,59,75,63,54,81,82,81,83,74,67,59,71,84,67,59,85,73,72,71,68,65,62,86,60,80,72,57,64,49,69,64,72,70,71,66,65,69,59,57,50,45,74,71,62,83,47,49,73,56,56,48,66,50,51,60,48,62,56,49,67,43,68,68,52,53,52,54,54,63,37,54,43,46,50,42,46,34,38,36,46,46,41,45,51,40,42,47,33,42,42,41,40,41,41,51,42,40,34,36,32,31,46,33,54,39,45,36,35,36,40,42,27,36,38,43,35,35,27,33,27,32,30,37,30,36,25,38,42,51,43,47,41,38,38,43,46,66,62,54,53,43,44,63,52,77,70,60,66,76,75,62,57,70,67,78,76,101,63,68,67,83,92,75,84,77,94,100,94,85,80,77,76,79,90,80,77,72,72,79,76,61,69,56,67,49,57,68,68,67,73,83,69,69,93,80,85,75,78,97,84,99,116,124,115,136,145,129,132,145,153,160,140,177,160,189,171,172,173,191,174,176,176,143,176,183,193,162,173,155,164,148,141,154,146,108,120,126,117,119,95,100,90,107,102,104,74,70,70,67,74,60,69,64,53,54,51,44,48,37,23,34,27,26,31,29,27,19,30,24,16,18,14,15,18,19,10,13,13,10,9,6,16,9,9,2,9,8,13,5,7,8,5,6,12,0,6,10,4,9,12,11,9,4,4,7,5,7,6,2,6,6,3,5,10,6,5,8,2,5,7,7,2,7,3,9,3,3,4,4,5,5,5,6,8,5,5,4,4,5,3,2,3,3,3,2,5,8,8,3,3,4,3,2,6,3,6,6,8,3,4,5,6,3,1,0,3,3,4,5,2,8,4,3,4,1,2,5,1,2,3,2,3,5,5,0,3,3,1,4,1,5,0,3,3,3,2,3,7,5,2,7,6,3,7,2,0,1,4,4,1,2,1,1,4,8,4,1,1,2,2,2,1,2,5,1,3,2,5,8,6,4,3,2,7,3,2,10,2,1,3,6,3,4,2,1,3,4,5,2,2,1,4,4,2,5,2,4,3,1,5,3,2,6,2,6,1,3,2,1,4,4,3,3,4,2,4,6,4,3,3,1,1,1,1,5,2,1,0,0,3,5,7,4,5,3,1,3,1,2,7,1,5,5,1,3,1,5,2,2,1,2,2,6,1,1,3,1,5,1,1,0,2,2,1,2,1,1,3,4,1,0,3,1,3,2,1,0,1,3,2,4,2,1,2,4,2,1,1,2,2,1,0,1,3,2,1,3,2,1,3,1,3,0,1,0,2,3,1,1,1,1,2,1,2,3,1,2,1,3,0,2,2,2,0,3,0,2,0,3,3,0,2,0,2,3,0,1,0,5,1,2,2,2,2,3,1,2,1,4,1,3,0,3,1,3,4,0,2,2,3,0,3,4,0,1,1,0,1,2,3,0,0,1,0,0,1,2,4,2,1,1,1,1,0,1,2,2,0,2,0,1,0,1,0,0,1,1,2,4,0,0,5,2,0,1,1,0,2,1,2,3,1,1,4,3,0,1,1,1,1,0,0,0,0,1,2,0,3,0,1,0,0,2,1,2,1,1,3,1,2,2,2,1,0,2,0,1,1,0,0,1,1,3,0,2,0,0,0,1,6,1,0,0,3,1,2,3,1,2,0,2,1,1,0,0,0,3,1,2,0,2,1,3,3,0,1,0,0,0,4,1,3,0,0,0,1,1,0,0,2,2,2,1,0,3,1,4,3,1,0,3,2,1,1,2];
// const postInjectionSPectrum5 = [0,0,0,0,0,0,0,0,0,0,2,0,2,2,1,5,2,15,11,19,24,20,29,28,32,41,34,35,39,46,43,32,36,49,27,25,27,42,39,35,39,40,38,37,39,44,32,42,43,50,52,64,47,41,41,65,55,60,53,50,67,51,63,75,65,64,67,81,63,79,95,88,98,113,101,120,116,139,125,153,145,126,141,147,156,151,129,134,121,131,130,125,96,125,111,119,94,119,101,79,95,83,108,77,85,96,90,90,86,76,77,76,86,78,89,93,86,73,83,75,68,89,60,86,64,83,76,71,66,79,97,76,58,73,64,92,97,95,61,62,74,70,83,88,73,78,74,86,73,77,74,77,57,64,68,63,76,58,52,61,51,64,63,60,48,76,64,63,61,59,55,63,59,75,65,56,55,56,55,46,65,62,63,61,58,49,49,47,49,50,60,58,57,60,56,61,62,36,54,45,51,39,55,42,40,44,40,43,41,47,47,39,41,51,48,51,38,47,33,43,47,45,41,34,54,35,38,40,24,41,27,40,38,35,43,30,37,48,32,49,42,33,35,48,31,32,35,40,46,47,43,34,39,41,41,36,54,61,35,37,37,54,41,67,64,50,49,54,45,69,60,64,71,64,59,55,63,68,71,72,76,67,80,65,73,78,83,77,85,87,74,95,83,90,93,86,85,95,97,76,60,72,69,59,75,84,64,72,76,71,59,65,50,65,78,67,66,62,78,92,87,78,85,91,97,98,108,102,125,121,127,130,135,134,127,163,162,155,149,168,164,157,157,150,186,149,161,176,156,169,182,159,154,165,171,150,132,162,162,152,161,138,130,138,106,97,111,103,89,90,73,66,81,79,78,70,64,57,50,48,68,50,45,39,42,40,42,30,37,34,28,34,23,20,22,17,19,18,15,19,12,6,15,10,15,14,13,7,9,9,11,10,10,7,6,9,10,9,10,5,4,8,6,5,10,11,6,8,12,4,8,12,8,5,1,8,7,4,7,6,9,5,7,2,8,6,1,5,7,5,7,4,2,3,4,5,4,7,5,7,3,3,1,0,6,3,4,6,3,3,4,7,3,5,2,1,6,3,2,3,4,5,5,4,3,4,9,4,4,7,8,3,4,2,8,3,4,6,0,3,4,5,2,3,9,6,9,3,8,4,5,2,2,4,3,4,1,3,5,4,2,5,3,2,1,1,5,3,4,6,5,3,4,3,4,0,6,1,3,3,4,2,2,2,6,6,3,7,2,7,4,2,0,3,4,3,2,3,6,6,4,5,3,3,4,1,4,1,1,6,3,2,3,6,3,3,4,3,2,2,5,3,0,3,1,1,5,4,5,2,3,3,5,2,3,5,3,2,2,2,0,3,1,4,6,1,1,2,2,0,3,0,3,4,5,3,2,3,0,4,2,3,1,1,3,4,1,1,2,3,4,6,1,0,1,3,2,6,2,0,2,3,1,0,2,1,4,2,1,2,2,1,2,3,1,2,3,2,4,0,1,5,1,0,0,5,2,2,1,5,0,0,1,0,2,1,3,2,1,4,2,1,2,2,2,0,0,1,4,2,2,2,1,2,0,1,1,1,3,2,1,1,2,4,0,4,3,1,4,2,1,2,0,4,3,2,2,0,2,2,3,2,2,1,1,2,1,2,2,0,1,0,2,2,1,2,1,2,1,1,1,2,2,3,1,1,2,0,1,1,1,2,1,3,0,1,5,1,3,0,1,1,2,1,3,3,2,1,0,0,3,1,1,2,1,0,3,1,2,0,1,1,1,1,0,2,1,4,2,2,1,0,0,1,1,1,1,0,0,0,0,0,3,0,2,2,1,0,2,2,0,1,2,1,1,3,3,2,1,2,2,1,1,3,1,1,3,0,1,0,1,2,1,0,2,1,1,2,1,1,1,1,0,1,0,2,0,1,0,1,0,1,3,2,0,0,0,2,1,3,3,1,2,1,1,1,2,0,4,0,1,3,1,0,0,0,3,2,2,2,0,1,0,0,1,1,0,0,1,1,0,3,0,1,3,0,1,1,4,1];
//---------------------------------------END OF TESTING PARAMETERS----------------------------------------------------------

function getStandardDeviation(arr){
    let mean = arr.reduce((acc, curr)=>{
        return acc + curr
    }, 0) / arr.length;
    
    arr = arr.map((el)=>{
        return (el - mean) ** 2
    });
    
    let total = arr.reduce((acc, curr)=> acc + curr, 0);
    
    return Math.sqrt(total / arr.length);
}

// Calculate Counts Per Minute....
function calcCPM(counts, minutes){
    return counts / minutes;
}

// Calculate Adjusted Hct!..... Working based on excel sheet numbers.
function calcHctAdj(hct) {
    let Eee = 100 - (hct * 0.99 * 0.91);
    return Eee;
}

// Calculate Whole Blood Adj Factor.....
function calcWholeBloodAdj(hct){
    let adj = 100 / (100 - hct);
    return adj;
}


// USING WHOLE BLOOD, Calculate Plasma Vol by passing in the sample counts..... Working based on excel sheet numbers.
function plasmaCalcWholeBlood(standardCounts, backgroundCounts, baselineCounts, patientSampleCounts, wholeBloodFactor) {
    console.log(patientSampleCounts * wholeBloodFactor);
    let Dee = 1000 * (standardCounts - backgroundCounts) / ((patientSampleCounts * wholeBloodFactor) - baselineCounts)
    return Dee;
}

// USING PLASMA SAMPLE, Calculate Plasma Vol by passing in the sample counts..... Working based on excel sheet numbers.
function plasmaCalc(standardCounts, backgroundCounts, baselineCounts, patientSampleCounts) {
    console.log(standardCounts, backgroundCounts, baselineCounts, patientSampleCounts)
    let Dee = 1000 * (standardCounts - backgroundCounts) / (patientSampleCounts - baselineCounts)
    return Dee;
}

// Calculate Unadjusted BV by passing in the plasmaVol and the adjHct..... Working based on the excel sheet numbers.
function calcUnadjustedBV(plasmaVol, adjHct) {
    let Dee = 100 * (plasmaVol / adjHct);
    console.log(Dee)
    return Dee;
}
  
// Calc LnG by passing in the unadjusted blood volume..... Working based on the excel sheet numbers.
function calcLnG(unadjBV) {
    let LnG = Math.log(unadjBV);
    return LnG;
}

// Calc slope intercepts by passing in the time array and the lnG array..... Working based on the excel sheet numbers.
const getSlopeIntercept = ((xArray, yArray) => {
    console.log('xArray', xArray);
    console.log('yArray', yArray);
    // Calculate Sums
    var xSum = 0, ySum = 0, xxSum = 0, xySum = 0;
    var count = xArray.length;
    for (var i = 0; i < count; i++) {
        xSum += xArray[i];
        ySum += yArray[i];
        xxSum += xArray[i] * xArray[i];
        xySum += xArray[i] * yArray[i];
    }

    // Calculate slope and intercept
    var slope = (count * xySum - xSum * ySum) / (count * xxSum - xSum * xSum);
    var intercept = (ySum / count) - (slope * xSum) / count;
    return {
        intercept,
        slope
    };
});

function calculateNHCT(tbv, ibv, phct){
    //Total Blood Volume
    //Ideal Blood Volume
    //Peripheral Hematocrit 
    let nhct = (tbv / ibv) * phct;
    if (Number.isNaN(nhct)){
        nhct = 0;
    }
    return Number(nhct.toFixed(1));
}

function calculateTBVDeviation(tbv, ibv){
    var dev = 0;
    if (tbv > ibv){
        dev = 100 - (ibv / tbv) * 100;
    }else{
        dev = (100 - (tbv / ibv) * 100) * -1;
    }
    return Number(dev.toFixed(1));
}

function calculateIdealRBCV(tbvDeviation, rbcv, amputeeCorrectionPercentage){
    amputeeCorrectionPercentage = amputeeCorrectionPercentage || 0;

    var rawDifference = Math.abs(rbcv * (tbvDeviation / 100));
    var idealRBCV = 0;

    if (tbvDeviation > 0){
        idealRBCV = rbcv - rawDifference;
    }else{
        idealRBCV = rbcv + rawDifference;
    }

    var amputeeCorrectionValue = idealRBCV * (amputeeCorrectionPercentage / 100);
    var correctedIdealRBCV =  idealRBCV - amputeeCorrectionValue;
    return Number(correctedIdealRBCV.toFixed(1));
}

function calculateRBCVDeviation(rbcv, irbcv){
    var dev = 0;
    if (rbcv > irbcv){
        dev = 100 - ((irbcv / rbcv) * 100);
    }else{
        dev = -1 * (100 - ((rbcv / irbcv) * 100));
    }
    if (Number.isNaN(dev)){
        return 0;
    }
    return Number(dev.toFixed(1));
}

function calculatePVDeviation(pv, ipv){
    var dev = 0;
    if (pv > ipv){
        dev =  100 - ((ipv / pv) * 100);
    }else{
        dev = -1 * ( 100 - ((pv / ipv) * 100));
    }
    return Number(dev.toFixed(1));
}

function calculateIdealPV(tbvDeviation, pv){
    var ipv = 0;
    var rawDifference = Math.abs(pv * (tbvDeviation / 100));
    if (tbvDeviation > 0){
        ipv = pv - rawDifference;
    }else{
        ipv = pv + rawDifference;
    }
    return Number(ipv.toFixed(1));
}

// Calculate single point blood volume
function calcSinglePoint(hct, standardCounts, backgroundCounts, patientSampleCounts, countTime, baselineCounts, typeOfBlood){
    let UBV = "";
    let adjHct = calcHctAdj(hct);
    let adjWholeBlood = calcWholeBloodAdj(hct);

    if(typeOfBlood == "plasma"){
        UBV = 1000 * (100 / adjHct) * (standardCounts - backgroundCounts) / (patientSampleCounts - baselineCounts);
    }else{
        UBV = 1000 * (100 / adjHct) * ((standardCounts - backgroundCounts) / ((patientSampleCounts / countTime) * adjWholeBlood - baselineCounts));
    }
    
    const redCellVolume = UBV * (hct / 100) * 0.91 * 0.99;
    const plasmaVolume = UBV - redCellVolume;
    const bloodVol = UBV ** (1-(0.00025003 * 12));

    /*
        A.S. 9.6.22
        Doc# 107360 Rev C. ECN# 2730
        Section 3.3.2
        Single-point blood volume
        For cases where only one unadjusted blood volume sample point is available, a slope value of
        0.00250 log-mL/min will be used to extrapolate back to the time-zero blood volume (i.e.,
        total blood volume).

        Normal: 0.0 <= m < 0.25%
        Elevated: 0.25 <= m <= 0.4%
        High: 0.4 <= m <= 0.5%
        Very High: m > 0.5%
    */

    let rv = { 
        tbv: Number(bloodVol.toFixed(1)), 
        rbcv: Number(redCellVolume.toFixed(1)), 
        pv: Number(plasmaVolume.toFixed(1)), 
        ubv: Number(UBV.toFixed(1)),
        albuminTransudationRate: 0.00250 * 100
    };
    console.log('RESULTS', rv);
    return rv;
};

// Main function to call and fully working against approved and verified BVA-100 calculation and excell sheet. April 22, 2022 3 samples and up are handled properly,
// one and two need to be adjusted, baselineHct is the pre-injection Hct.
function calcBloodVol(hctArray, timeArray, baselineHct, backgroundCounts, baselineCounts, sampleArray, standardCounts, typeOfBlood, bgCountTime, countTime) {
    /*
        WHEN COMPARING WITH VOPS KIT, THE VOPS KIT COUNTS BACKGROUND FOR THE SAME AMOUNT OF TIME IT COUNTS SAMPLES.
        BVA200 ONLY COUNTS FOR 1 MINUTE. SO TO MATCH VOPS / BVA100, DIVIDE THE BG COUNT BY THE COUNT TIME.
        I.E. VOPS says BG = 35 and COUNT TIME IS 2.5 Minutes. 35/2.5 = 14. 14 is what we want to enter.
    */


    var lnGArray = [];
    let unadjBloodVol = 0;
    var bgCPM = backgroundCounts * bgCountTime;
    backgroundCounts = bgCPM * countTime;

    if(sampleArray.length > 1){
        // Loop through the blood sample arrays calculating the adjHct, plasma, unadjustedBV, and LnG.
        for (i = 0; i < sampleArray.length; i++) {
            console.log("INSIDE LOOP");
            const adjHct = calcHctAdj(hctArray[i]);
            console.log('adjHct', adjHct);
            let plasmaVol = 0;
            if(typeOfBlood == "plasma"){
                plasmaVol = plasmaCalc(standardCounts, backgroundCounts, baselineCounts, sampleArray[i]);
                console.log('plasmaVol', plasmaVol);
            }else{
                const wholeBloodFactor = calcWholeBloodAdj(hctArray[i]);
                console.log('wholeBloodFactor', wholeBloodFactor);
                plasmaVol = plasmaCalcWholeBlood(standardCounts, backgroundCounts, baselineCounts, sampleArray[i], wholeBloodFactor);
                console.log('plasmaVol', plasmaVol);
            }
            unadjBloodVol = calcUnadjustedBV(plasmaVol, adjHct);
            console.log('unadjBloodVol', unadjBloodVol);
            const lng = calcLnG(unadjBloodVol);
            lnGArray.push(lng);
        }//end of foor loop

        // With the lnG array we can now calculate the slope intercepts needed to calculate the true blood volume and red cell volume.
        let slopeIntercept = getSlopeIntercept(timeArray, lnGArray);
        let intercept = slopeIntercept.intercept;
        let slope = slopeIntercept.slope;
        let bloodVol = Math.exp(intercept);
        let redCellVolume = bloodVol * (baselineHct / 100) * 0.91 * 0.99;
        let plasmaVolume = bloodVol - redCellVolume;

        //albumin transudation (min = 0.125%, max = 0.375%)
    
        // Uncomment below if testing, will also need to uncomment the three values passed into the function. (Top of page).

        let rv = { 
            tbv: Number(bloodVol.toFixed(1)), 
            rbcv: Number(redCellVolume.toFixed(1)), 
            pv: Number(plasmaVolume.toFixed(1)), 
            ubv: Number(unadjBloodVol.toFixed(1)),
            albuminTransudationRate: slope * 100
        };
        console.log('RESULTS', rv);
        return rv;
    }else{//Only one sample
        //sampleArray has already been converted to  at the beginning of this function.
        let patientSample = sampleArray[0];
        let result = calcSinglePoint(parseInt(baselineHct), parseInt(standardCounts), parseInt(backgroundCounts), patientSample, timeArray[0], baselineCounts, typeOfBlood);
        return result;
    }
}

// calcBloodVol();